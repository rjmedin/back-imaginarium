import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import { createRoutes } from '@presentation/routes';
import { errorHandler, notFoundHandler } from '@presentation/middleware/errorHandler';
import { Container } from '@infrastructure/container/Container';
import { config } from '@shared/config/config';
import logger from '@shared/utils/logger';

export const createApp = (): express.Application => {
  const app = express();
  const container = Container.getInstance();

  // Middlewares de seguridad
  app.use(helmet());
  app.use(cors({
    origin: process.env.NODE_ENV === 'production' 
      ? ['https://tu-dominio.com'] // Cambiar por tu dominio en producción
      : true,
    credentials: true
  }));

  // Rate limiting
  const limiter = rateLimit({
    windowMs: config.rateLimitWindowMs,
    max: config.rateLimitMaxRequests,
    message: {
      success: false,
      message: 'Demasiadas peticiones desde esta IP, intenta de nuevo más tarde.'
    },
    standardHeaders: true,
    legacyHeaders: false
  });
  app.use(limiter);

  // Middlewares de parsing
  app.use(express.json({ limit: '10mb' }));
  app.use(express.urlencoded({ extended: true, limit: '10mb' }));

  // Request logging en desarrollo
  if (config.nodeEnv === 'development') {
    app.use((req, res, next) => {
      logger.info(`${req.method} ${req.path}`, {
        body: req.body,
        query: req.query,
        params: req.params
      });
      next();
    });
  }

  // Rutas
  app.use(createRoutes(container.userController, container.conversationController));

  // Middleware de manejo de errores
  app.use(notFoundHandler);
  app.use(errorHandler);

  return app;
}; 